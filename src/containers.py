from collections import OrderedDict
from utils import SanitationUtils, DescriptorUtils

class API_Container(OrderedDict):
    """defines the interface for an abstract item generated by an API"""

    def __init__(self, data=None):
        if data is None:
            data = {}
        assert hasattr(data, 'items'), "Container initialized with non-dict"
        super(API_Container, self).__init__([
            (key, SanitationUtils.sanitize_container_value(val)) for key, val \
            in data.items()
        ])

    def get_fmt_string(self):
        return unicode( )

    def __unicode__(self):
        return u'< %s >' % ' | '.join([
            "%s" % self.__class__.__name__,
        ])

    def __copy__(self):
        return self.__class__(OrderedDict(self.items()))

    def __str__(self):
        return SanitationUtils.coerce_bytestr(self.__unicode__())

class API_Product(API_Container):
    """defines the interface for a product generated by the API"""
    sku_key = None
    stock_level_key = None
    stock_tracked_key = None
    title_key = None
    id_key = None
    pid = DescriptorUtils.safe_key_property('id_key')

    @property
    def title(self):
        return self.get(self.title_key)

    @property
    def sku(self):
        return self.get(self.sku_key)

    @property
    def stock_level(self):
        stock_raw = self.get(self.stock_level_key)
        if stock_raw is not None:
            return stock_raw

    @property
    def managing_stock(self):
        return self.get(self.stock_tracked_key)

    def __unicode__(self):
        return u'< %s >' % ' | '.join([
            "%s" % self.pid,
            "%s" % self.sku,
            "%s" % self.title
        ])

class WC_API_Product(API_Product):
    sku_key = 'meta.MYOB SKU'
    second_sku_key = 'sku'
    stock_level_key = 'stock_quantity'
    stock_status_key = 'in_stock'
    stock_tracked_key = 'managing_stock'
    title_key = 'title'
    id_key = 'id'

    @property
    def sku(self):
        return super(WC_API_Product, self).sku or self.get(self.second_sku_key)

    @property
    def stock_status(self):
        return self.get(self.stock_status_key)

    @API_Product.stock_level.setter
    def stock_level(self, value):
        assert isinstance(value, (int, float)), "value must be int or float"
        self[self.stock_level_key] = value
        self.refresh_stock_status()

    def refresh_stock_status(self):
        if self.stock_level > 0:
            self[self.stock_status_key] = True
        else:
            self[self.stock_status_key] = False

class Xero_API_Product(API_Product):
    sku_key = 'Code'
    id_key = 'Code'
    stock_level_key = 'QuantityOnHand'
    title_key = 'Name'
    stock_tracked_key = 'IsTrackedAsInventory'
