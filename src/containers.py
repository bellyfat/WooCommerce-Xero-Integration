from collections import OrderedDict
from numbers import Number

from utils import SanitationUtils, DescriptorUtils


class Item(OrderedDict):
    """defines the interface for an abstract item generated by an API or CSV"""

    def __init__(self, data=None):
        if data is None:
            data = {}
        assert hasattr(data, 'items'), "Container initialized with non-dict"
        super(Item, self).__init__([
            (key, SanitationUtils.sanitize_container_value(val)) for key, val \
            in data.items()
        ])

    def get_fmt_string(self):
        return unicode( )

    def __unicode__(self):
        return u'< %s >' % ' | '.join([
            "%s" % self.__class__.__name__,
        ])

    def __copy__(self):
        return self.__class__(OrderedDict(self.items()))

    def __str__(self):
        return SanitationUtils.coerce_bytestr(self.__unicode__())

class Product(Item):
    """ Interface for a product generated by either the API or parsing a CSV File. """

    sku_key = None
    stock_level_key = None
    managing_stock_key = None
    title_key = None
    id_key = None
    report_attrs = ['pid', 'sku', 'title', 'stock_level', 'managing_stock', 'stock_status']

    @property
    def pid(self):
        return self.get(self.id_key)

    @property
    def title(self):
        return self.get(self.title_key)

    @property
    def sku(self):
        return self.get(self.sku_key)

    @property
    def stock_level(self):
        stock_raw = self.get(self.stock_level_key)
        if stock_raw is not None:
            return float(stock_raw)


    @property
    def managing_stock(self):
        return self.get(self.managing_stock_key)

    def __unicode__(self):
        return u'< %s >' % ' | '.join([
            "%s" % self.pid,
            "%s" % self.sku,
            "%s" % self.title
        ])

class WCProduct(Product):
    """ Interfact for a WooCommerce Product. """

    stock_status_key = None
    second_sku_key = None

    @property
    def sku(self):
        return super(WCProduct, self).sku or self.get(self.second_sku_key)

    @property
    def stock_status(self):
        return self.get(self.stock_status_key)

    @stock_status.setter
    def stock_status(self, value):
        self[self.stock_status_key] = value

    @Product.stock_level.setter
    def stock_level(self, value):
        assert \
            isinstance(value, Number),\
            "value must be number, not %s: %s" % (
                type(value),
                repr(value)
            )
        self[self.stock_level_key] = value
        self.refresh_stock_status()

    @Product.managing_stock.setter
    def managing_stock(self, value):
        assert\
            isinstance(value, bool), \
            "value must be boolean, not %s: %s" % (
                type(value),
                repr(value)
            )
        self[self.managing_stock_key] = value

    def refresh_stock_status(self):
        self.stock_status = (self.stock_level > 0)

class WCAPIProduct(WCProduct):
    """ Interfact for a WooCommerce API Product. """

    sku_key = 'meta.MYOB SKU'
    second_sku_key = 'sku'
    stock_level_key = 'stock_quantity'
    stock_status_key = 'in_stock'
    managing_stock_key = 'managing_stock'
    title_key = 'title'
    id_key = 'id'

class WCCSVProduct(WCProduct):
    """ Interfact for a WooCommerce CSV Product. """

    sku_key = 'meta:MYOB SKU'
    second_sku_key = 'sku'
    stock_level_key = 'stock'
    stock_status_key = 'stock_status'
    managing_stock_key = 'manage_stock'
    title_key = 'post_title'
    id_key = 'ID'

    @property
    def pid(self):
        try:
            return int(super(WCCSVProduct, self).pid)
        except TypeError as exc:
            raise Exception("could not get PID for %s: %s" % (self, exc))

    @property
    def stock_status(self):
        return super(WCCSVProduct, self).stock_status == 'instock'

    @stock_status.setter
    def stock_status(self, value):
        value = 'instock' if value else 'outofstock'
        self[self.stock_status_key] = value

    @property
    def managing_stock(self):
        return super(WCCSVProduct, self).managing_stock == 'yes'

    @managing_stock.setter
    def managing_stock(self, value):
        assert\
            isinstance(value, bool), \
            "value must be boolean, not %s: %s" % (
                type(value),
                repr(value)
            )
        self[self.managing_stock_key] = 'yes' if value else 'no'

class XeroProduct(Product):
    """ Interfact for a Xero Product (API Only). """

    sku_key = 'Code'
    id_key = 'ItemID'
    stock_level_key = 'QuantityOnHand'
    title_key = 'Name'
    managing_stock_key = 'IsTrackedAsInventory'
    report_attrs = ['sku', 'title', 'stock_level', 'managing_stock']
